import * as continuum from "../../../src/core/Continuum";
import * as stage from "../../../src/core/Stage";

var log = require('winston');
log.level = 'error';


export interface CacheStageInterface extends stage.Stage { // Auto generated by tool connecting to ServiceBroker
    has: (k: string) => boolean;
    get: (k: string) => string;
    set: (k: string, v: string) => boolean;
    getDataAndProcess: (continuum: continuum.ContinuumBase,
                        cs: CacheStageInterface, params: any) => void // Should be Continuum not ContinuumBase
}

export class CacheStage extends stage.Stage implements CacheStageInterface {
    public has(k: string): boolean {
        log.info("CacheStage.has(" + k + ")");
        return !(typeof this.store[k] === "undefined");
    }

    public get(k: string): string { return this.store[k]; }

    public set(k: string, v: string): boolean {
        this.store[k] = v;
        return true;
    }

    public getDataAndProcess; // Pick up global function and hang off interface to stage - could also be defined inline.

    private store: { [k: string]: string; } = {};
}